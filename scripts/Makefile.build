src 		   := $(obj)

obj-y 		   :=
lib-y 		   :=
lib-name 	   :=
EXTRA_AFLAGS   :=
EXTRA_CFLAGS   :=
EXTRA_CPPFLAGS :=
EXTRA_LDFLAGS  :=
EXTRA_ARFLAGS  :=
asflags-y  	   :=
ccflags-y      :=
cppflags-y 	   :=
ldflags-y  	   :=
arflags-y  	   :=

kbuild-dir  := $(src)
kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild), $(kbuild-dir)/kbuild, $(kbuild-dir)/Makefile)
include $(kbuild-file)

include scripts/Kbuild.include
include scripts/Makefile.lib

ifneq ($(strip $(lib-y) $(lib-)),)
lib-target := $(obj)/lib$(lib-name).a
endif

ifneq ($(strip $(obj-y) $(obj-) $(lib-target)),)
builtin-target := $(obj)/built-in.o
endif

__build: $(builtin-target) $(lib-target)
	@:

#
# Rule to compile a set of .o files into one .o file
#
ifdef builtin-target
quiet_cmd_link_o_target = AR        $@
# If the list of objects to link is empty, just create an empty built-in.o
cmd_link_o_target 		= rm -f $@; $(AR) $(ar_flags) $@ $(obj-y)

$(builtin-target): $(obj-y) 
	$(Q)$(call cmd,link_o_target)

endif # builtin-target

#
# Rule to compile a set of .o files into one .a file
#
ifdef lib-target
quiet_cmd_link_l_target = AR        $@
cmd_link_l_target 		= rm -f $@; $(AR) $(ar_flags) $@ $(lib-y)

$(lib-target): $(lib-y)
	$(call cmd,link_l_target)

endif # lib-target

quiet_cmd_cc_o_c = CC        $@
cmd_cc_o_c 	     = $(CC) $(c_flags) -c -o $@ $<

$(obj)/%.o: $(src)/%.c
	$(call cmd,cc_o_c)

quiet_cmd_cpp_o_c = CPP       $@
cmd_cpp_o_c 	  = $(CPP) $(cpp_flags) -c -o $@ $<

$(obj)/%.o: $(src)/%.cpp
	$(call cmd,cpp_o_c)

quiet_cmd_as_o_S = AS        $@
cmd_as_o_S       = $(CC) $(a_flags) -c -o $@ $<

$(obj)/%.o: $(src)/%.S 
	$(call cmd,as_o_S)

PHONY := FORCE
FORCE:

.PHONY: $(PHONY)
