src := $(obj)

lib-y :=
obj-y :=
EXTRA_AFLAGS   :=
EXTRA_CFLAGS   :=
EXTRA_CPPFLAGS :=
EXTRA_LDFLAGS  :=
asflags-y  :=
ccflags-y  :=
cppflags-y :=
ldflags-y  :=

kbuild-dir := $(src)
kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild), $(kbuild-dir)/kbuild, $(kbuild-dir)/Makefile)
include $(kbuild-file)

include scripts/Kbuild.include
include scripts/Makefile.lib

ifndef obj
$(warning kbuild: Makefile.build is included improperly)
endif

ifneq ($(strip $(lib-y) $(lib-)),)
lib-target := $(obj)/lib.a
endif

ifneq ($(strip $(obj-y) $(obj-) $(lib-target)),)
builtin-target := $(obj)/built-in.o
endif

cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<

#
# Rule to compile a set of .o files into one .o file
#
ifdef builtin-target
quiet_cmd_link_o_target = AR      $@
# If the list of objects to link is empty, just create an empty built-in.o
cmd_link_o_target = $(if $(strip $(obj-y)),\
		      rm -f $@; $(AR) cDPrsT $@ $(filter $(obj-y), $^), \
		      rm -f $@; $(AR) cDPrsT$(KBUILD_ARFLAGS) $@)

$(builtin-target): $(obj-y) 
	$(Q)$(call cmd,link_o_target)

targets += $(builtin-target)
endif # builtin-target

quiet_cmd_cc_o_c = CC      $@
cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<

$(obj)/%.o: $(src)/%.c
	$(Q)$(call cmd,cc_o_c)

PHONY := FORCE
FORCE:

.PHONY: $(PHONY)
